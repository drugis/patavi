name: Patavi-server main | push | deploy

on:
  push:
    branches: master

defaults:
  run:
    working-directory: './server'

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version: ['18']
        os: [ubuntu-22.04]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('package.json') }}

      - name: run yarn
        run: yarn

      - name: docker login
        run: docker login -u addis -p ${{ secrets.dockerRegistryPassword }}

      - name: build patavi server image
        run: cd docker && docker build --tag addis/patavi-server:live --build-arg sha=`git rev-parse --short HEAD` .

      - name: docker push patavi server image
        run: docker push addis/patavi-server:live

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_ed25519.key
          chmod 600 ~/.ssh/id_ed25519.key
          cat >>~/.ssh/config <<END
          Host jumphost
            HostName $SSH_JUMP_HOST
            User $SSH_JUMP_USER
            IdentityFile ~/.ssh/id_ed25519.key
            StrictHostKeyChecking no
          Host internalserver
            HostName $SSH_INTERNAL_HOST
            User $SSH_INTERNAL_USER  
            IdentityFile ~/.ssh/id_ed25519.key
            StrictHostKeyChecking no
          END
        env:
          SSH_JUMP_USER: ${{ secrets.prodJumpHostUser }}
          SSH_KEY: ${{ secrets.deployPrivateKey }}
          SSH_JUMP_HOST: ${{ secrets.prodJumpHost }}
          SSH_INTERNAL_HOST: ${{ secrets.prodInternalServer }}
          SSH_INTERNAL_USER: ${{ secrets.prodInternalUser }}

      - name: pull server image on server
        run: ssh -J jumphost internalserver 'podman pull addis/patavi-server:live'

       - name: remove patavi server container on the server
        run: >
          ssh -J jumphost internalserver \
          "if  systemctl list-unit-files | grep patavi-server
            then
            systemctl stop patavi-server
            systemctl disable patavi-server
            rm -f /etc/systemd/system/patavi-server.service
            systemctl daemon-reload
            podman rm patavi-server
            fi"

      - name: run patavi server container on the server
        run: >
          ssh -J jumphost internalserver \
          "podman run -d \
            --network="slirp4netns:allow_host_loopback=true" \
            --restart on-failure \
            -e PATAVI_BROKER_HOST=guest:guest@10.0.2.2 \
            -e PATAVI_PROXY_HOST=patavi.drugis.org \
            -e BEHIND_PROXY=true \
            -e PATAVI_PORT=3000 \
            -e PATAVI_DB_HOST=10.0.2.2 \
            -e PATAVI_DB_NAME=patavi \
            -e PATAVI_DB_USER=patavi \
            -e PATAVI_DB_PASSWORD=${{ secrets.pataviDbPasswordLive }} \
            -e SECURE_TRAFFIC=false \
            -e PATAVI_API_KEY=${{ secrets.pataviApiKeyLive }} \
            -p 3000:3000 \
            --name patavi-server \
            addis/patavi-server:live"

      - name: generate system service file
        run: >
          ssh -J jumphost internalserver \
          'podman generate systemd --name patavi-server > /etc/systemd/system/patavi-server.service'

      - name: stop patavi server container
        run: ssh -J jumphost internalserver 'podman stop patavi-server'

      - name: stop patavi server container
        run: >
          ssh -J jumphost internalserver \
          "systemctl daemon-reload && \
            systemctl enable patavi-server && \
            systemctl enable patavi-server"

      - name: notify on slack channel on failure
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.slackWebhook }}
          SLACK_USERNAME: gitbot
          SLACK_TITLE: 'Develop push:'
          SLACK_MESSAGE: 'patavi-live deploy failed'

      - name: notify on slack channel on success
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.slackWebhook }}
          SLACK_USERNAME: gitbot
          SLACK_TITLE: 'Develop push:'
          SLACK_MESSAGE: 'patavi-live deployed'
